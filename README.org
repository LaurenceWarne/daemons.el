* daemons.el [[https://melpa.org/#/daemons][file:https://melpa.org/packages/daemons-badge.svg]] [[https://stable.melpa.org/#/daemons][file:https://stable.melpa.org/packages/daemons-badge.svg]]

This is an Emacs mode to give you a UI for managing init system daemons (services). I wrote this after getting tired of typing out =sudo service my_thing reload= all the time. It's also nice to have a consistent UI over different init systems.

N.B. This package was briefly known as =services-mode=.

** System support

There is support for the following init systems and service managers:

- systemd (RHEL7, Fedora, openSUSE, Debian, Ubuntu, Arch)
- SysVinit (RHEL6)
- [[https://github.com/Homebrew/homebrew-services][brew services (macOS)]]
- GNU Shepherd for user services (GuixSD)

It's designed to be easily extensible (see below) so if your system isn't supported please consider contributing.

** Usage

You can open the daemons list with =M-x daemons=. If started from a TRAMP buffer then the daemons for that remote system will be listed and manageable, otherwise it will be all the daemons on your local system.

Navigate the list with =n= and =p=. Refresh the list with =g= (it's just a =tabulated-list-mode= buffer).

The following commands are available for each daemon:

| Command         | Key in =*daemons*= buffer |
|-----------------+-------------------------|
| =daemons-status=  | RET                     |
| =daemons-start=   | s                       |
| =daemons-stop=    | S                       |
| =daemons-reload=  | r                       |
| =daemons-restart= | R                       |

Results of commands are displayed in a =special-mode= buffer, in which the same commands are available for the selected daemon. So you can (for example) keep reloading the same daemon with =r= without having to re-select it.

You can dismiss either buffer with =q=.

Of course you can also call the commands interactively, e.g. =M-x daemons-start= and enter the daemon's name at the prompt. The prompt has completion, so (for example) you can type =do= to narrow it down to =docker=, or =sys= to narrow it down to any of the 193 =systemd= services.

It looks something like this for systemd:

[[./img/daemons-systemd-demo.png]]

and something like this for SysVinit:

[[./img/daemons-sysvinit-demo.png]]

** Installation

You can install this from [[https://melpa.org][MELPA]] with =M-x package-install daemons=. See [[https://melpa.org/#/getting-started][here]] for how to get started with MELPA.

If for some reason you are unable or prefer not to use MELPA, you can also do this:

1. Download the [[https://github.com/cbowdon/daemons.el/releases][latest release distribution]] and *extract*.
2. Install with =M-x package-install-file= - at the prompt, pass the path to the extracted directory, e.g. =~/Downloads/daemons.el-VERSION/=.

** Configuration

Please see =M-x customize-mode=. If you are having trouble with permissions for SysV then setting the =daemons-always-sudo= custom variable may be what you need.

** Extending

To extend =daemons= to support another init system, there are two steps:

1. Add your submodule name (e.g. =daemons-example=) to the =daemons-init-system-submodules= custom variable.
2. Write a package that defines the submodule using the =daemons-define-submodule= macro:

#+BEGIN_EXAMPLE emacs-lisp
  (daemons-define-submodule daemons-example
    "Daemons module for example services."

    ;; An expression to evaluate that will return true
    ;; if this submodule is appropriate for this system
    :test (and (eq system-type 'gnu/linux)
               (equal 0 (daemons--shell-command "which example")))

    ;; An alist of user commands (see `daemons--commands-alist')
    :commands
    '((status . (lambda (name) (format "example list %s" name)))
      (start . (lambda (name) (format "example start %s" name)))
      (stop . (lambda (name) (format "example stop %s" name)))
      (restart . (lambda (name) (format "example restart %s" name))))

    ;; An expression to get the daemons list (see `daemons--list')
    :list (daemons-example--list)

    ;; An expression to get the list headers (see `daemons--list-headers')
    :headers (daemons-example--list-headers))
#+END_EXAMPLE

Have a look at any of the existing submodules for inspiration. [[./daemons-shepherd.el][The submodule for GNU Shepherd]] is a short and sweet example.
